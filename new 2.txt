****************READ WHEN YOU OPEN THE LAPTOP********************

Logic for invoicehistory page with view invocie button:
1. Data to be sent from each invoice: bookingId, invoiceId and userId. Somehow figure it out!



 
.admin-panel {
    padding: 20px;
  }
   
  .search-bar {
    width: 100%;
    max-width: 300px;
    padding: 8px 12px;
    margin-bottom: 16px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 14px;
  }
   
  .card-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 16px;
    justify-content: center;
  }
   
  .booking-card {
    border: 1px solid #ccc;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    padding: 16px;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    gap: 8px;
    width: 100%;
    box-sizing: border-box;
    transition: box-shadow 0.3s ease;
  }
   
  .booking-card.editing {
    border-color: #007bff;
    box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
  }
   
  .booking-card input[type="text"],
  .booking-card input[type="date"],
  .booking-card select {
    padding: 6px 10px;
    border: 1px solid #aaa;
    border-radius: 4px;
    font-size: 14px;
    width: 100%;
    box-sizing: border-box;
  }
   
  .actions {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 8px;
  }
   
  .booking-card button {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
  }
   
  .booking-card button:hover {
    background-color: #0056b3;
  }
   
  .booking-card button.cancel {
    background-color: #6c757d;
  }
   
  .booking-card button.cancel:hover {
    background-color: #5a6268;
  }
   
  .status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: bold;
    color: white;
    display: inline-block;
    transition: background-color 0.3s ease;
  }
   
  .status-badge.pending {
    background-color: #f0ad4e;
  }
   
  .status-badge.inprogress {
    background-color: #0275d8;
  }
   
  .status-badge.complete {
    background-color: #5cb85c;
  }

  .status-badge.paid {
    background-color: #6a1b9a; 
  }
   
  @media (max-width: 600px) {
    .card-container {
      grid-template-columns: 1fr;
    }
   
    .actions {
      flex-direction: column;
    }
   
    .search-bar {
      width: 100%;
    }
  }
   
     // useEffect(() => {
  //   let stage = 0;
  //   const interval = window.setInterval(() => {
  //     if (stage === 0) {
  //       setProgress(0);
  //       setStatusText('Pending');
  //     } else if (stage === 1) {
  //       setProgress(progressMap[service]);
  //       setStatusText(service);
  //     } 
  //     stage = (stage + 1) % 2; // Loop back to 0 after 2
  //   }, 5000); // Every 10 seconds

  //   return () => clearInterval(interval);
  // }, []);

  // useEffect(() => {
  //   fetch(`http://localhost:9096/users/bookings/user/${userId}`)
  //     .then(res => res.json())
  //     .then(data => {
  //       setBookings(data);
  //       const filteredBookings = data.filter((booking: { status: string; }) => booking.status !== 'Paid');
  //       const latestStatus = filteredBookings.at(-1)?.status ?? 'Invalid State';
  
  //       setService(latestStatus);
  //       setProgress(progressMap[latestStatus]);
  //       setStatusText(latestStatus);
  //     })
  //     .catch(err => console.error('Failed to fetch bookings:', err));
  // }, []);
  
  // useEffect(() => {
  //   fetch(`http://localhost:9096/users/bookings/user/${userId}`)
  //     .then(res => res.json())
  //     .then(data => {
  //       setBookings(data);
  
  //       const filteredBookings = data.filter((booking: { status: string }) => booking.status !== 'Paid');
  
  //       if (filteredBookings.length === 0) {
          
  //       } else {
  //         const latestStatus = filteredBookings.at(-1)?.status ?? 'Pending';
  //         setService(latestStatus);
  //         setProgress(progressMap[latestStatus] ?? 0);
  //         setStatusText(latestStatus);
  //       }
  //     })
  //     .catch(() => {let stage = 0;
  //       const interval = window.setInterval(() => {
  //         if (stage === 0) {
  //           setProgress(0);
  //           setStatusText('Pending');
  //         } else if (stage === 1) {
  //           setProgress(progressMap['Pending']);
  //           setStatusText('Pending');
  //         }
  //         stage = (stage + 1) % 2;
  //       }, 5000);

  //       return () => clearInterval(interval);})
  // }, []);  // useEffect(() => {
  //   let stage = 0;
  //   const interval = window.setInterval(() => {
  //     if (stage === 0) {
  //       setProgress(0);
  //       setStatusText('Pending');
  //     } else if (stage === 1) {
  //       setProgress(progressMap[service]);
  //       setStatusText(service);
  //     } 
  //     stage = (stage + 1) % 2; // Loop back to 0 after 2
  //   }, 5000); // Every 10 seconds

  //   return () => clearInterval(interval);
  // }, []);

  // useEffect(() => {
  //   fetch(`http://localhost:9096/users/bookings/user/${userId}`)
  //     .then(res => res.json())
  //     .then(data => {
  //       setBookings(data);
  //       const filteredBookings = data.filter((booking: { status: string; }) => booking.status !== 'Paid');
  //       const latestStatus = filteredBookings.at(-1)?.status ?? 'Invalid State';
  
  //       setService(latestStatus);
  //       setProgress(progressMap[latestStatus]);
  //       setStatusText(latestStatus);
  //     })
  //     .catch(err => console.error('Failed to fetch bookings:', err));
  // }, []);
  
  // useEffect(() => {
  //   fetch(`http://localhost:9096/users/bookings/user/${userId}`)
  //     .then(res => res.json())
  //     .then(data => {
  //       setBookings(data);
  
  //       const filteredBookings = data.filter((booking: { status: string }) => booking.status !== 'Paid');
  
  //       if (filteredBookings.length === 0) {
          
  //       } else {
  //         const latestStatus = filteredBookings.at(-1)?.status ?? 'Pending';
  //         setService(latestStatus);
  //         setProgress(progressMap[latestStatus] ?? 0);
  //         setStatusText(latestStatus);
  //       }
  //     })
  //     .catch(() => {let stage = 0;
  //       const interval = window.setInterval(() => {
  //         if (stage === 0) {
  //           setProgress(0);
  //           setStatusText('Pending');
  //         } else if (stage === 1) {
  //           setProgress(progressMap['Pending']);
  //           setStatusText('Pending');
  //         }
  //         stage = (stage + 1) % 2;
  //       }, 5000);

  //       return () => clearInterval(interval);})
  // }, []);